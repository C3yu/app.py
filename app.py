import yfinance as yf
import streamlit as st
import pandas as pd
import datetime
from streamlit.column_config import LineChartColumn # Import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sparkline

# -------------------------------
# Stock List (Default) - ‡πÄ‡∏û‡∏¥‡πà‡∏° Salesforce ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô Default ‡πÅ‡∏•‡πâ‡∏ß
# -------------------------------
default_stocks = {
    "GOOGL": "Alphabet",
    "MSFT": "Microsoft",
    "AMZN": "Amazon",
    "CRM": "Salesforce"
}

# -------------------------------
# Date Setup
# -------------------------------
today = datetime.date.today()
one_month_ago = today - datetime.timedelta(days=30)
three_months_ago = today - datetime.timedelta(days=90)
six_months_ago = today - datetime.timedelta(days=180) # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sparkline

# -------------------------------
# Data Fetching
# -------------------------------
@st.cache_data(ttl=3600) # Cache data for 1 hour to prevent excessive API calls
def get_real_prices(symbol):
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Sparkline ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        df = yf.Ticker(symbol).history(period="6mo", interval="1d")
        if df.empty:
            st.warning(f"‚ö†Ô∏è No historical data found for {symbol}. It might be a new listing or incorrect symbol.")
            return pd.Series()
        return df["Close"]
    except Exception as e:
        st.error(f"‚ùå Error fetching data for {symbol}: {e}")
        return pd.Series()

# -------------------------------
# Growth Calculation
# -------------------------------
def calc_growth(df, reference_date):
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ df ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        if df.empty or len(df) < 2: # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ß‡∏±‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö daily change, ‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monthly
            return None

        # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô df ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö reference_date
        # ‡πÉ‡∏ä‡πâ df.index.get_loc ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠ fallback ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        past_price_candidates = df.loc[df.index <= pd.to_datetime(reference_date)]
        
        if past_price_candidates.empty:
            return None # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á

        past_price = past_price_candidates.iloc[-1]
        current_price = df.iloc[-1]

        if past_price == 0: # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ZeroDivisionError
            return None 

        growth = ((current_price - past_price) / past_price) * 100
        return round(growth, 2)
    except Exception as e:
        # st.error(f"Error in calc_growth: {e}") # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug
        return None

def calc_daily_change(df):
    try:
        if len(df) < 2:
            return None
        today_price = df.iloc[-1]
        yesterday_price = df.iloc[-2]
        if yesterday_price == 0: # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ZeroDivisionError
            return None
        
        change = ((today_price - yesterday_price) / yesterday_price) * 100
        return round(change, 2)
    except Exception:
        return None

# -------------------------------
# Streamlit UI
# -------------------------------
st.set_page_config(page_title="AI Agent Stock Dashboard", layout="wide", initial_sidebar_state="collapsed")
st.title("ü§ñüìä AI Agent Stock Tracker")

# Header 1
st.header("‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤")

# Command Input (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏° workflow ‡πÄ‡∏î‡∏¥‡∏°)
command = st.text_input("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡πÄ‡∏ä‡πà‡∏ô 'AI agent stock')", "AI agent stock").strip().lower()

if command == "ai agent stock":
    # Header 2
    st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô")
    stock_input = st.text_input("‡∏õ‡πâ‡∏≠‡∏ô‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤, ‡πÄ‡∏ä‡πà‡∏ô MSFT,GOOGL):")

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    if stock_input:
        custom_symbols = [x.strip().upper() for x in stock_input.split(",") if x.strip()]
        stocks = {sym: default_stocks.get(sym, "Unknown") for sym in custom_symbols}
    else:
        stocks = default_stocks # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß

    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    stocks_data = []
    
    for symbol, name in stocks.items():
        prices = get_real_prices(symbol)

        if prices.empty:
            # st.error ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô get_real_prices ‡πÅ‡∏•‡πâ‡∏ß
            continue 

        current_price = round(prices.iloc[-1], 2) if not prices.empty else None

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        growth_1d = calc_daily_change(prices)
        growth_1m = calc_growth(prices, one_month_ago)
        growth_3m = calc_growth(prices, three_months_ago)
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sparkline (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
        sparkline_data = prices.tolist() if not prices.empty else []

        stocks_data.append({
            "Symbol": symbol,
            "Company": name,
            "Price (USD)": current_price,
            "% Change (1 Day)": growth_1d,
            "History (1 Month)": prices.loc[prices.index >= pd.to_datetime(one_month_ago)].tolist() if not prices.empty else [], # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            "History (3 Month)": prices.loc[prices.index >= pd.to_datetime(three_months_ago)].tolist() if not prices.empty else [], # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            "% Change (1 Month)": growth_1m,
            "% Change (3 Month)": growth_3m,
            "Trend (6 Months)": sparkline_data # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sparkline
        })

    stocks_df = pd.DataFrame(stocks_data)

    if not stocks_df.empty:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì min/max ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LineChartColumn
        # ‡πÉ‡∏ä‡πâ list comprehension ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà sparkline_data ‡∏≠‡∏≤‡∏à‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        all_sparkline_values = [val for sublist in stocks_df["Trend (6 Months)"] if sublist for val in sublist]
        
        y_min_val = min(all_sparkline_values) if all_sparkline_values else None
        y_max_val = max(all_sparkline_values) if all_sparkline_values else None

        # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        column_order = ["Company", "Price (USD)", "% Change (1 Day)", "% Change (1 Month)", "% Change (3 Month)", "Trend (6 Months)"]
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Sparkline
        st.dataframe(
            stocks_df[column_order], # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            column_config={
                "Trend (6 Months)": LineChartColumn(
                    "Trend (6 Months)",
                    y_min=y_min_val, # ‡∏õ‡∏£‡∏±‡∏ö scale Y ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    y_max=y_max_val, # ‡∏õ‡∏£‡∏±‡∏ö scale Y ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    width="small",
                    height="small",
                    help="‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤"
                ),
                "Price (USD)": st.column_config.NumberColumn("Price (USD)", format="$%.2f"),
                "% Change (1 Day)": st.column_config.NumberColumn("% Change (1 Day)", format="%.2f%%"),
                "% Change (1 Month)": st.column_config.NumberColumn("% Change (1 Month)", format="%.2f%%"),
                "% Change (3 Month)": st.column_config.NumberColumn("% Change (3 Month)", format="%.2f%%"),
            },
            hide_index=True,
            use_container_width=True
        )
    else:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏´‡∏∏‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠.")

else:
    st.info("‚å®Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'AI agent stock' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏∏‡πâ‡∏ô")
